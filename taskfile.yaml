---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"
tasks:
  default:
    silent: false
    cmd: task --list-all

  generate-graph:
    desc: Generate graph
    cmd: dot -Tpng ./doc/comm.dot -o ./doc/comm.png

  encrypt-secrets:
    cmd: gpg --symmetric --cipher-algo AES256 -o encrypted_secrets.sh unencrypted_secrets.sh

  decrypt-secrets:
    cmd: gpg --quiet --batch --yes --decrypt --passphrase="$(SECRET_PASSPHRASE)" --output unencrypted_secrets.sh encrypted_secrets.sh

  lint:
    cmd: |
      yamllint .
      ansible-lint

  tf-init:
    cmds:
      - task: .tf-execute
        vars: { ARGS: "init -input=false" }

  tf-apply:
    cmds:
      - task: .tf-execute
        vars: { ARGS: "apply -compact-warnings -auto-approve -input=false" }

  tf-generate-inventory:
    cmds:
      - task: .tf-execute
        vars:
          {
            ARGS: "apply -target=local_file.hosts -compact-warnings -auto-approve",
          }

  tf-run:
    desc: Run terraform. Add command as parameter eg. `task tf-run -- plan`
    cmds:
      - task: .tf-execute
        vars: { ARGS: "{{.CLI_ARGS}}" }

  .tf-execute:
    internal: true
    vars:
      ARGS: "{{.ARGS}}"
    cmd: |
      export TF_VAR_HOME_IP=`curl -sS https://ifconfig.co`

      set -a
      source unencrypted_secrets.sh
      terraform {{.ARGS}}

  ansible-run:
    dir: playbooks
    cmds:
      - cmd: |
          export ANSIBLE_CONFIG=ansible.cfg
          export ANSIBLE_FORCE_COLOR=True
          set -a 
          source ../unencrypted_secrets.sh
          # no_proxy needed to circumvent a forking error on mac os
          export no_proxy='*'
          ansible-playbook {{.CLI_ARGS}}

  ansible-install-requirements:
    cmd: ansible-galaxy install -r playbooks/roles/requirements.yml --force
