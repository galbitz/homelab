---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"
tasks:
  default:
    desc: List all tasks
    silent: false
    cmd: task --list-all

  generate-graph:
    desc: Generate graph
    cmd: dot -Tpng ./doc/comm.dot -o ./doc/comm.png

  encrypt-secrets:
    desc: Encrypt secrets
    cmd: sops -e main.secret.env > main.secret.sops.env

  lint:
    desc: Lint
    cmd: |
      yamllint .
      ansible-lint

  tf-init:
    desc: Initialize terraform
    cmds:
      - task: .tf-execute
        vars:
          ARGS: "init -input=false"

  tf-apply:
    desc: Apply terraform
    cmds:
      - task: .tf-execute
        vars:
          ARGS: "apply -compact-warnings -auto-approve -input=false"

  tf-generate-inventory:
    desc: Generate ansible host inventory
    cmds:
      - task: .tf-execute
        vars:
          ARGS: "apply -target=local_file.hosts -compact-warnings -auto-approve"

  tf-run:
    desc: Run terraform. Add command as parameter eg. `task tf-run -- plan`
    cmds:
      - task: .tf-execute
        vars:
          ARGS: "{{.CLI_ARGS}}"

  .tf-execute:
    internal: true
    vars:
      ARGS: "{{.ARGS}}"
    cmd: |
      set -a
      export TF_VAR_HOME_IP=`curl -sS https://ifconfig.co`
      # import secrets to env
      source <(sops -d {{.ROOT_DIR}}/main.secret.sops.env)
      terraform {{.ARGS}}

  ansible-run:
    desc: Run ansible playbook
    dir: playbooks
    cmds:
      - cmd: |
          set -a
          export ANSIBLE_CONFIG=ansible.cfg
          export ANSIBLE_FORCE_COLOR=True
          # no_proxy needed to circumvent a forking error on mac os
          export no_proxy='*'
          # import secrets to env
          source <(sops -d {{.ROOT_DIR}}/main.secret.sops.env)
          ansible-playbook {{.CLI_ARGS}}

  ansible-install-requirements:
    desc: Install ansible requirements
    cmd: ansible-galaxy install -r playbooks/roles/requirements.yml --force
