---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

vars:
  # renovate: datasource=github-releases depName=prometheus-operator/prometheus-operator
  PROMETHEUS_OPERATOR_VERSION: v0.71.2
  KUBECONFIG_FILE: "{{.ROOT_DIR}}/kubeconfig"
  KUBERNETES_DIR: "{{.ROOT_DIR}}/kubernetes"
  AGE_FILE: "{{.ROOT_DIR}}/age.key"

env:
  KUBECONFIG: "{{.KUBECONFIG_FILE}}"

includes:
  talos: .taskfiles/talos/Taskfile.yaml
  sops: .taskfiles/sops/Taskfile.yaml

tasks:
  default:
    desc: List all tasks
    silent: false
    cmd: task --list-all

  generate-graph:
    desc: Generate graph
    cmd: dot -Tpng ./doc/comm.dot -o ./doc/comm.png

  encrypt-secrets:
    desc: Encrypt secrets
    cmd: sops -e main.secret.env > main.secret.sops.env

  lint:
    desc: Lint
    cmd: |
      yamllint .
      ansible-lint ansible/

  tf-init:
    desc: Initialize terraform
    cmds:
      - task: .tf-execute
        vars:
          ARGS: "init -input=false"

  tf-apply:
    desc: Apply terraform
    cmds:
      - task: .tf-execute
        vars:
          ARGS: "apply -compact-warnings -auto-approve -input=false"

  tf-generate-inventory:
    desc: Generate ansible host inventory
    cmds:
      - task: .tf-execute
        vars:
          ARGS: "apply -target=local_file.hosts -compact-warnings -auto-approve"

  tf-run:
    desc: Run terraform. Add command as parameter eg. `task tf-run -- plan`
    cmds:
      - task: .tf-execute
        vars:
          ARGS: "{{.CLI_ARGS}}"

  .tf-execute:
    dir: ./terraform
    internal: true
    vars:
      ARGS: "{{.ARGS}}"
    cmd: |
      set -a
      export TF_VAR_HOME_IP=`curl -sS https://ifconfig.co`
      # import secrets to env
      source <(sops -d {{.ROOT_DIR}}/main.secret.sops.env)
      terraform {{.ARGS}}

  ansible-run:
    desc: Run ansible playbook
    dir: ansible
    cmds:
      - cmd: |
          set -a
          export ANSIBLE_CONFIG=ansible.cfg
          export ANSIBLE_FORCE_COLOR=True
          # no_proxy needed to circumvent a forking error on mac os
          export no_proxy='*'
          # import secrets to env
          source <(sops -d {{.ROOT_DIR}}/main.secret.sops.env)
          ansible-playbook {{.CLI_ARGS}}

  ansible-install-requirements:
    desc: Install ansible requirements
    cmd: ansible-galaxy install -r ansible/roles/requirements.yml --force

  bootstrap:
    cmds:
      #- scp -o StrictHostKeyChecking=no sysadmin@192.168.1.61:/home/sysadmin/.kube/config {{.KUBECONFIG_FILE}}
      - kubectl apply --kubeconfig {{.KUBECONFIG_FILE}} --server-side --filename https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/{{.PROMETHEUS_OPERATOR_VERSION}}/example/prometheus-operator-crd/monitoring.coreos.com_podmonitors.yaml
      - kubectl apply --kubeconfig {{.KUBECONFIG_FILE}} --server-side --filename https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/{{.PROMETHEUS_OPERATOR_VERSION}}/example/prometheus-operator-crd/monitoring.coreos.com_prometheusrules.yaml
      - kubectl apply --kubeconfig {{.KUBECONFIG_FILE}} --server-side --filename https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/{{.PROMETHEUS_OPERATOR_VERSION}}/example/prometheus-operator-crd/monitoring.coreos.com_scrapeconfigs.yaml
      - kubectl apply --kubeconfig {{.KUBECONFIG_FILE}} --server-side --filename https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/{{.PROMETHEUS_OPERATOR_VERSION}}/example/prometheus-operator-crd/monitoring.coreos.com_servicemonitors.yaml
      - kubectl create namespace flux-system --dry-run=client -o yaml | kubectl --kubeconfig {{.KUBECONFIG_FILE}} apply --filename -
      - cat age.key | kubectl --kubeconfig {{.KUBECONFIG_FILE}} create secret generic sops-age --namespace=flux-system --from-file=age.agekey=/dev/stdin
      - flux --kubeconfig {{.KUBECONFIG_FILE}} bootstrap github --token-auth --owner=galbitz --repository=homelab --branch=test --path=kubernetes/main --personal
      #- kubectl apply --kubeconfig {{.KUBECONFIG_FILE}} --server-side -f https://raw.githubusercontent.com/longhorn/longhorn/v1.6.0/deploy/prerequisite/longhorn-iscsi-installation.yaml
      #- kubectl apply --kubeconfig {{.KUBECONFIG_FILE}} --server-side -f https://raw.githubusercontent.com/longhorn/longhorn/v1.6.0/deploy/prerequisite/longhorn-nfs-installation.yaml

    preconditions:
      - sh: test ! -z "$GITHUB_TOKEN"
        msg: "GitHub token not found"
      - msg: "Missing kubeconfig"
        sh: "test -f {{.KUBECONFIG_FILE}}"

  copyconfig:
    dir: "{{.ROOT_DIR}}"
    cmds:
      - cp -vR kubeconfig ~/.kube/config
